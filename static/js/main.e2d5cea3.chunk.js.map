{"version":3,"sources":["screens/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Main","react_default","a","createElement","className","Component","App","state","loading","searchinput","data","filteredData","componentDidMount","console","log","axios","get","then","response","Object","assertThisInitialized","_this","setState","catch","error","handleSearchChange","e","target","value","submitSearch","preventDefault","isItLoading","react_loading_default","type","color","height","width","_this2","this","Button","bsStyle","onClick","Form","inline","onSubmit","FormGroup","controlId","ControlLabel","FormControl","placeholder","onChange","screens_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6QAiBeA,0LARb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,qBARcC,cCmHJC,6MA5GdC,MAAQ,CACPC,SAAS,EACTC,YAAa,GACbC,KAAM,KACNC,aAAc,QAGfC,kBAAoB,WACnBC,QAAQC,IAAI,YACZC,IAAMC,IAAI,oEACTC,KAAK,SAACC,GACLL,QAAQC,IAAII,EAAZC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAE,KACDA,EAAKC,SAAS,CACbd,SAAS,EACTE,KAAMQ,EAASR,SAGhBa,MAAM,SAAUC,GACfX,QAAQC,IAAIU,QAKfC,mBAAqB,SAACC,GACrBL,EAAKC,SAAS,CACbb,YAAaiB,EAAEC,OAAOC,QAGvBf,QAAQC,IAAI,aAAcO,EAAKd,UAGhCsB,aAAe,SAACH,GACfb,QAAQC,IAAI,qBACZY,EAAEI,oBAGHC,YAAc,WAEb,OADAlB,QAAQC,IAAI,YACRO,EAAKd,MAAMC,QAEbP,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAc+B,KAAM,QAASC,MAAO,OAAQC,OAAQ,IAAKC,MAAO,MAIhEnC,EAAAC,EAAAC,cAAA,sGAKM,IAAAkC,EAAAC,KACR,OAAIA,KAAK/B,MAAMC,QAEbP,EAAAC,EAAAC,cAAA,OACCC,UAAU,OAEVH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAc+B,KAAM,QAASC,MAAO,OAAQC,OAAQ,IAAKC,MAAO,OAEhEnC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS,kBAAKJ,EAAKf,SAAS,CAAEd,SAAU6B,EAAK9B,MAAMC,YAA5E,iBAOD8B,KAAK/B,MAAMG,KAEbT,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OACCC,UAAU,OAEVH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACdH,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CACCC,QAAM,EACNC,SAAUN,KAAKT,cAEf5B,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAWC,UAAU,kBACpB7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,aACA9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CACCf,KAAK,OACLgB,YAAY,cACZrB,MAAOU,KAAK/B,MAAME,YAClByC,SAAUZ,KAAKb,wBAKnBxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEdH,EAAAC,EAAAC,cAACgD,EAAD,CAAMzC,KAAM4B,KAAK/B,MAAMG,UAQ3BT,EAAAC,EAAAC,cAAA,qCAnGeE,aCGE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.e2d5cea3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Main extends Component {\n\tstatic propTypes = {\n\t\tdata: PropTypes.array.isRequired\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t\t<div className=\"Main\">\n\t\t\t\t\t<div className=\"main-container\">container</div>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Button, Form, FormGroup, ControlLabel, FormControl } from 'react-bootstrap';\nimport ReactLoading from 'react-loading';\n\nimport './App.css';\n\nimport Main from './screens/Main';\n\nclass App extends Component {\n\tstate = {\n\t\tloading: true,\n\t\tsearchinput: '',\n\t\tdata: null,\n\t\tfilteredData: null\n\t}\n\n\tcomponentDidMount = () => {\n\t\tconsole.log('mounting');\n\t\taxios.get('https://data.austintexas.gov/resource/sf6w-qpmi.json?$limit=2000')\n\t\t.then((response) => {\n\t\t  console.log(response, this);\n\t\t\tthis.setState({\n\t\t\t\tloading: false,\n\t\t\t\tdata: response.data\n\t\t\t})\n\t\t})\n\t\t.catch(function (error) {\n\t\t  console.log(error);\n\t\t})\n\n\t}\n\n\thandleSearchChange = (e) => {\n\t\tthis.setState({\n\t\t\tsearchinput: e.target.value\n\t\t});\n\n\t\tconsole.log('this state', this.state)\n\t}\n\n\tsubmitSearch = (e) => {\n\t\tconsole.log('this is submitted');\n\t\te.preventDefault();\n\t}\n\n\tisItLoading = () => {\n\t\tconsole.log('loading?')\n\t\tif (this.state.loading) {\n\t\t\treturn (\n\t\t\t\t<ReactLoading type={'cubes'} color={'blue'} height={100} width={100} />\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div> Data Received</div>\n\t\t\t)\n\t\t}\n\t}\n\n\trender() {\n\t\tif (this.state.loading) {\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"App\"\n\t\t\t\t>\n\t\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<ReactLoading type={'cubes'} color={'blue'} height={100} width={100} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Button bsStyle=\"danger\" onClick={()=> this.setState({ loading: !this.state.loading})}>Test Button</Button>\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\t\t\t)\n\n\t\t}\n\n\t\tif (this.state.data) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"App\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"search-container\">\n\t\t\t\t\t\t\t<Form \n\t\t\t\t\t\t\t\tinline \t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tonSubmit={this.submitSearch} \n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FormGroup controlId=\"formInlineName\">\n\t\t\t\t\t\t\t\t\t<ControlLabel>Name</ControlLabel>\n\t\t\t\t\t\t\t\t\t<FormControl \n\t\t\t\t\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Search Here\" \n\t\t\t\t\t\t\t\t\t\tvalue={this.state.searchinput} \n\t\t\t\t\t\t\t\t\t\tonChange={this.handleSearchChange}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"App-header\">\n\t\n\t\t\t\t\t\t\t<Main data={this.state.data} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tThis is default\n\t\t\t</div>\n\t\t)\n\n\n\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["screens/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Main","mapTheResults","console","log","this","props","data","length","_this2","filteredData","react_default","a","createElement","className","Button","onClick","map","row","transactor_name","Component","defaultProps","App","state","loading","searchinput","organizations","componentDidMount","axios","get","then","response","Object","assertThisInitialized","_this","orgs","filter","item","findIndex","x","filer_name","push","form","setState","catch","error","handleSearchChange","e","target","value","submitSearch","names","getName","preventDefault","obj","key","val","objects","i","hasOwnProperty","concat","regex","RegExp","search","lastIndexOf","react_loading_default","type","color","height","width","bsStyle","Form","inline","onSubmit","FormGroup","controlId","ControlLabel","FormControl","componentClass","placeholder","onChange","screens_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab3ae2bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport PropTypes from 'prop-types';\n\nclass Main extends Component {\n\tstatic propTypes = {\n\t\tdata: PropTypes.array.isRequired,\n\t\tfilteredData: PropTypes.array\n\t};\n\n\tstatic defaultProps = {\n\t\tfilteredData : null\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('data? :', this.props.data.length)\n\t}\n\n\tmapTheResults = () => {\n\t\tconsole.log('map the results')\n\t}\n\n\trender() {\n\t\tif (this.props.data && !this.props.filteredData) {\n\t\t\treturn (\n\t\t\t\t<div className=\"Main\">\n\t\t\t\t\t<div className=\"main-container\">container\n\t\t\t\t\t\t<Button onClick={() => console.log('this.props ', this.props)}>Click me</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\tif (this.props.filteredData) {\n\t\t\treturn (\n\t\t\t\t<div className=\"Main\">\n\t\t\t\t\t<div className=\"main-container\">container\n\t\t\t\t\t\tThere is filtered Data\n\t\t\t\t\t<Button onClick={() => console.log('this.props ', this.props)}>Click me</Button>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.props.filteredData.map((row) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t{row.transactor_name}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tThis is default\n\t\t\t</div>\n\t\t)\n\n\t}\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Button, Form, FormGroup, ControlLabel, FormControl } from 'react-bootstrap';\nimport ReactLoading from 'react-loading';\n\nimport './App.css';\n\nimport Main from './screens/Main';\n\nclass App extends Component {\n\tstate = {\n\t\tloading: true,\n\t\tsearchinput: '',\n\t\tdata: null,\n\t\tfilteredData: null,\n\t\torganizations: null\n\t}\n\n\tcomponentDidMount = () => {\n\t\tconsole.log('mounting');\n\t\taxios.get('https://data.austintexas.gov/resource/asyh-u6ja.json?$limit=5000')\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response, this);\n\t\t\t\t// Create new Organization array based on Unique Orgs\n\t\t\t\tlet orgs = []\n\t\t\t\tresponse.data.filter((item) => {\n\t\t\t\t\tvar i = orgs.findIndex(x => x.filer_name === item.filer_name);\n\t\t\t\t\tif(i <= -1){\n\t\t\t\t\t\torgs.push({filer_name: item.filer_name, form: item.form});\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\n\t\t\t\tconsole.log('orgs ', orgs)\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tdata: response.data,\n\t\t\t\t\torganizations: orgs\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(function (error) {\n\t\t\t  console.log(error);\n\t\t\t})\n\t}\n\n\thandleSearchChange = (e) => {\n\t\tthis.setState({\n\t\t\tsearchinput: e.target.value\n\t\t});\n\t\tconsole.log('this state', this.state)\n\t}\n\n\tsubmitSearch = (e) => {\n\t\tconsole.log('this is submitted');\n\t\tlet names = this.getName(this.state.data, 'expenditure_type', this.state.searchinput);\n\t\tthis.setState({\n\t\t\tfilteredData: names\n\t\t});\n\t\te.preventDefault();\n\t}\n\n\tgetName = (obj, key, val) => {\n\t\tvar objects = [];\n\t\tfor (var i in obj) {\n\t\t\tif (!obj.hasOwnProperty(i)) continue;\n\t\t\t// This splits up the objects in the JSON into lower levels\n\t\t\tif (typeof obj[i] == 'object') {\n\t\t\t\tobjects = objects.concat(this.getName(obj[i], key, val));   \n\t\t\t// Once JSON is split, search through each key-value pair \n\t\t\t} else if (typeof obj[i] !== 'object') {\n\t\t\t\t//if key matches and value matches or if key matches and value is not passed (eliminating the case where key matches but passed value does not)\n\t\t\t\tvar regex = new RegExp('' + val + '', 'i');\n\t\t\t\t// at this point, the line above is the same as: var regex = /${val}/i;\n\t\t\t\tif (i === key && val === '') {\n\t\t\t\t\tobjects.push(obj);\n\t\t\t\t}\n\t\t\t\t// Use this instead if you want all fields instead of just the \"key\" field\n\t\t\t\t// else if (i === key && obj[i].search(regex) !== -1) {\n\t\t\t\telse if (obj[i].search(regex) !== -1 && obj[\"transaction_type\"] === \"Contribution\") {\n\t\t\t\t\tobjects.push(obj);\n\t\t\t\t} else if (obj[i] === val && key === ''){\t\n\t\t\t\t\t//only add if the object is not already in the array\n\t\t\t\t\tif (objects.lastIndexOf(obj) === -1){\n\t\t\t\t\t\tobjects.push(obj);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn objects;\n\t};\n\n\trender() {\n\t\tif (this.state.loading) {\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"App\"\n\t\t\t\t>\n\t\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<ReactLoading type={'cubes'} color={'blue'} height={100} width={100} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Button bsStyle=\"danger\" onClick={()=> this.setState({ loading: !this.state.loading})}>Test Button</Button>\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\t\t\t)\n\n\t\t}\n\n\t\tif (this.state.data) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"App\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"search-container\">\n\t\t\t\t\t\t\t<Form \n\t\t\t\t\t\t\t\tinline \t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tonSubmit={this.submitSearch} \n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FormGroup controlId=\"formInlineType\">\n\t\t\t\t\t\t\t\t\t<ControlLabel>Type</ControlLabel>\n\t\t\t\t\t\t\t\t\t<FormControl componentClass=\"select\" placeholder=\"select\">\n       \t\t\t\t\t\t\t\t\t<option value=\"select\">select</option>\n        \t\t\t\t\t\t\t\t<option value=\"expenditures\">Expenditures</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"contributions\">Contributions</option>\n    \t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t\t<FormGroup controlId=\"formInlineName\">\n\t\t\t\t\t\t\t\t\t<FormControl \n\t\t\t\t\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Search Here\" \n\t\t\t\t\t\t\t\t\t\tvalue={this.state.searchinput} \n\t\t\t\t\t\t\t\t\t\tonChange={this.handleSearchChange}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"App-header\">\n\t\n\t\t\t\t\t\t\t<Main data={this.state.data} filteredData={this.state.filteredData} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tThis is default\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}